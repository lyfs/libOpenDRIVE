cmake_minimum_required(VERSION 3.10)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

project(libOpenDrive VERSION 0.1 DESCRIPTION ".xodr library")
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED True)

set(CMAKE_CXX_FLAGS "-Wall")
set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")

add_library(OpenDrive SHARED
    Geometries/Arc.cpp
    Geometries/CubicSpline.cpp
    Geometries/Line.cpp
    Geometries/ParamPoly3.cpp
    Geometries/RoadGeometry.cpp
    Geometries/Spiral.cpp
    Geometries/Spiral/odrSpiral.cpp
    Lanes.cpp
    LaneSection.cpp
    Mesh.cpp
    OpenDriveMap.cpp
    RefLine.cpp
    Road.cpp
    RoadMark.cpp
    RoadNetworkMesh.cpp
    RoadObject.cpp
    Thirdparty/json11/json11.cpp
    Thirdparty/pugixml/pugixml.cpp
)
target_include_directories(OpenDrive PRIVATE .)
target_include_directories(OpenDrive PRIVATE Thirdparty)

if(EMSCRIPTEN)
    set(CMAKE_EXECUTABLE_SUFFIX ".html")
endif()

# test-xodr
add_executable(test-xodr test.cpp)
target_link_libraries(test-xodr OpenDrive)
target_include_directories(test-xodr PUBLIC .)

# viewer
find_package(PkgConfig REQUIRED)
pkg_check_modules(GLM REQUIRED glm)
add_executable(viewer Viewer/viewer.cpp Viewer/OrbitControls.cpp)
if(EMSCRIPTEN)
    set_target_properties(viewer PROPERTIES LINK_FLAGS "-s MAX_WEBGL_VERSION=1 -s USE_GLFW=3")
else()
    pkg_check_modules(GLFW3 REQUIRED IMPORTED_TARGET glfw3)
    target_link_libraries(viewer PkgConfig::GLFW3)
    target_include_directories(viewer PUBLIC ${GLFW3_INCLUDE_DIRS})
    target_sources(viewer PUBLIC Viewer/glad/glad.c)
endif()
target_link_libraries(viewer OpenDrive)
target_include_directories(viewer PUBLIC . Viewer ${GLM_INCLUDE_DIRS})